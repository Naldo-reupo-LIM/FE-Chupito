// TODO: Unit test bad design
import { render, screen } from '@testing-library/react'

import AppBarMobile, { AppBarMobileProps } from './AppBarMobile'
import { useAuth } from '../../shared/hooks/useAuth'

jest.mock('../../shared/hooks/useAuth')
const mockedUseAuth = useAuth as jest.Mock

const mockLogout = jest.fn()
jest.mock('../../utils/logout', () => ({
  logout: () => mockLogout(),
}))

const renderComponent = (props: AppBarMobileProps) =>
  render(<AppBarMobile {...props} />)

const props: AppBarMobileProps = {
  version: '1.2',
}

const mockHistoryPush = jest.fn()
jest.mock('react-router-dom', () => ({
  useRouteMatch: () => ({ url: '/login' }),
  useHistory: () => ({
    push: mockHistoryPush,
  }),
}))

describe('AppBarMobile component', () => {
  describe('when isAuth is false', () => {
    afterEach(() => {
      jest.clearAllMocks()
      jest.resetAllMocks()
      jest.resetModules()
    })

    it('should render all elements', () => {
      mockedUseAuth.mockReturnValue({ state: { isAuth: false, userUid: '' } })
      renderComponent(props)
      const version = screen.getByText(/v1.2/i)
      expect(version).toBeInTheDocument()
    })

    it('should render login button when isAuth is false', () => {
      mockedUseAuth.mockReturnValue({ state: { isAuth: false, userUid: '' } })
      renderComponent(props)
      const loginButton = screen.getByText(/Login/i)
      expect(loginButton).toBeInTheDocument()
    })
  })
})
