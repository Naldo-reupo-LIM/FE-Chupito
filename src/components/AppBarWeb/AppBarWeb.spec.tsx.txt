// TODO: Unit test bad design
import { render, screen } from '@testing-library/react'

import AppBarWeb, { AppBarWebProps } from './AppBarWeb'

const mockUseAuth = jest.fn()
jest.mock('../../shared/hooks/useAuth', () => ({
  useAuth: () => mockUseAuth(),
}))

const mockLogout = jest.fn()
jest.mock('../../utils/logout', () => ({
  logout: () => mockLogout(),
}))

const renderComponent = (props: AppBarWebProps) =>
  render(<AppBarWeb {...props} />)

const mockHistoryPush = jest.fn()
jest.mock('react-router-dom', () => ({
  useRouteMatch: () => ({ url: '/login' }),
  useHistory: () => ({
    push: mockHistoryPush,
  }),
}))

describe('AppBarWeb component', () => {
  afterEach(() => {
    jest.clearAllMocks()
    jest.resetAllMocks()
    jest.resetModules()
  })

  it('should render all elements', () => {
    mockUseAuth.mockReturnValue({ state: { isAuth: false, userUid: '' } })
    const props: AppBarWebProps = {
      version: '1.2',
    }
    const version = screen.getByText(/v1.2/i)
    renderComponent(props)
    expect(version).toBeInTheDocument()
  })

  it('should render login button when isAuth is false', () => {
    mockUseAuth.mockReturnValue({ state: { isAuth: false, userUid: '' } })
    const props: AppBarWebProps = {
      version: '1.2',
    }
    const loginButton = screen.getByText(/Login/i)
    renderComponent(props)
    expect(loginButton).toBeInTheDocument()
  })
})
